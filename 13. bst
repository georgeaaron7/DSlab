#include <iostream>
#define nullptr NULL
using namespace std;
struct Node {
   int key;
   Node* left;
   Node* right;
   Node(int k) : key(k), left(nullptr), right(nullptr) {}
};
Node* root = nullptr;
Node* insert(Node* node, int key) {
   if (node == nullptr) {
       return new Node(key);
   }
   if (key < node->key) {
       node->left = insert(node->left, key);
   } else if (key > node->key) {
       node->right = insert(node->right, key);
   }
   return node;
}
Node* minimum(Node* node) {
   while (node != nullptr && node->left != nullptr) {
       node = node->left;
   }
   return node;
}
Node* maximum(Node* node) {
   while (node != nullptr && node->right != nullptr) {
       node = node->right;
   }
   return node;
}
Node* search(Node* node, int key) {
   if (node == nullptr || node->key == key) {
       return node;
   }
   if (key < node->key) {
       return search(node->left, key);
   } else {
       return search(node->right, key);
   }
}
Node* predecessor(Node* node) {
   if (node == nullptr || node->left == nullptr) {
       return nullptr;
   }
   Node* temp = node->left;
   while (temp->right != nullptr) {
       temp = temp->right;
   }
   return temp;
}
Node* successor(Node* node) {
   if (node == nullptr || node->right == nullptr) {
       return nullptr;
   }
   Node* temp = node->right;
   while (temp->left != nullptr) {
       temp = temp->left;
   }
   return temp;
}
Node* deleteNode(Node* node, int key) {
   if (node == nullptr) {
       return node;
   }
   if (key < node->key) {
       node->left = deleteNode(node->left, key);
   } else if (key > node->key) {
       node->right = deleteNode(node->right, key);
   } else {
       if (node->left == nullptr) {
           Node* temp = node->right;
           delete node;
           return temp;
       } else if (node->right == nullptr) {
           Node* temp = node->left;
           delete node;
           return temp;
       }
       Node* temp = predecessor(node);
       node->key = temp->key;
       node->right = deleteNode(node->right, temp->key);
   }
   return node;
}
int main() {
   root = insert(root, 50);
   insert(root, 30);
   insert(root, 20);
   insert(root, 40);
   insert(root, 70);
   insert(root, 60);
   insert(root, 80);
   Node* minNode = minimum(root);
   cout << "Minimum key: " << minNode->key << std::endl;
   Node* maxNode = maximum(root);
   cout << "Maximum key: " << maxNode->key << std::endl;
   int searchKey = 60;
   Node* searchResult = search(root, searchKey);
   if (searchResult != nullptr) {
       cout << "key " << searchKey << " found." << std::endl;
   } else {
       cout << "key " << searchKey << " not found." << std::endl;
   }
}

