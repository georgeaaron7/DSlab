#include <iostream>
#define nullptr NULL
using namespace std;
class Node {
public:
   int data;
   Node* prev;
   Node* next;
   Node(int d) {
       data = d;
       prev = next = nullptr;
   }
};
class Queue {
private:
   Node* head;
   Node* tail;
public:
   Queue() {
       head = tail = nullptr;
   }
   void enqueue(int data) {
       Node* newNode = new Node(data);
       if (isEmpty()) {
           head = tail = newNode;
       } else {
           tail->next = newNode;
           newNode->prev = tail;
           tail = newNode;
       }
   }
   int dequeue() {
       if (isEmpty()) {
           return INT_MAX;
       }
       Node* temp = head;
       int data = temp->data;
       if (head == tail) {
           head = tail = nullptr;
       } else {
           head = head->next;
           head->prev = nullptr;
       }
       delete temp;
       return data;
   }
   bool isEmpty() {
       return head == nullptr;
   }
};
int main() {
   Queue q;
   q.enqueue(10);
   q.enqueue(20);
   q.enqueue(30);
   cout << q.dequeue() << endl;
   cout << q.dequeue() << endl;
   return 0;
}

