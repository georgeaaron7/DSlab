#include <iostream>

class Heap {
private:
    int *arr;
    int capacity;
    int size;

    int parent(int i) { return (i - 1) / 2; }
    int leftChild(int i) { return 2 * i + 1; }
    int rightChild(int i) { return 2 * i + 2; }

    void swap(int &a, int &b) {
        int temp = a;
        a = b;
        b = temp;
    }

    void minHeapify(int i) {
        int l = leftChild(i);
        int r = rightChild(i);
        int smallest = i;

        if (l < size && arr[l] < arr[i])
            smallest = l;
        if (r < size && arr[r] < arr[smallest])
            smallest = r;

        if (smallest != i) {
            swap(arr[i], arr[smallest]);
            minHeapify(smallest);
        }
    }

    void maxHeapify(int i) {
        int l = leftChild(i);
        int r = rightChild(i);
        int largest = i;

        if (l < size && arr[l] > arr[i])
            largest = l;
        if (r < size && arr[r] > arr[largest])
            largest = r;

        if (largest != i) {
            swap(arr[i], arr[largest]);
            maxHeapify(largest);
        }
    }

public:
    Heap(int capacity) {
        this->capacity = capacity;
        arr = new int[capacity];
        size = 0;
    }

    void insert(int key) {
        if (size == capacity) {
            std::cout << "Heap is full. Cannot insert more elements.\n";
            return;
        }

        size++;
        int i = size - 1;
        arr[i] = key;

        while (i != 0 && arr[parent(i)] > arr[i]) {
            swap(arr[i], arr[parent(i)]);
            i = parent(i);
        }
    }

    void deleteMin() {
        if (size <= 0) {
            std::cout << "Heap is empty. Cannot delete minimum element.\n";
            return;
        }

        if (size == 1) {
            size--;
            return;
        }

        arr[0] = arr[size - 1];
        size--;
        minHeapify(0);
    }

    void deleteMax() {
        if (size <= 0) {
            std::cout << "Heap is empty. Cannot delete maximum element.\n";
            return;
        }

        if (size == 1) {
            size--;
            return;
        }

        arr[0] = arr[size - 1];
        size--;
        maxHeapify(0);
    }

    void printHeap() {
        for (int i = 0; i < size; i++)
            std::cout << arr[i] << " ";
        std::cout << "\n";
    }

    int getMin() {
        if (size <= 0) {
            std::cout << "Heap is empty. No minimum element.\n";
            return -1;
        }
        return arr[0];
    }

    int getMax() {
        if (size <= 0) {
            std::cout << "Heap is empty. No maximum element.\n";
            return -1;
        }
        return arr[0];
    }
};

int main() {
    Heap minHeap(10);
    minHeap.insert(3);
    minHeap.insert(2);
    minHeap.insert(15);
    minHeap.insert(5);
    minHeap.insert(4);

    std::cout << "Min Heap: ";
    minHeap.printHeap();
    std::cout << "Minimum Element: " << minHeap.getMin() << "\n";

    Heap maxHeap(10);
    maxHeap.insert(3);
    maxHeap.insert(2);
    maxHeap.insert(15);
    maxHeap.insert(5);
    maxHeap.insert(4);

    std::cout << "Max Heap: ";
    maxHeap.printHeap();
    std::cout << "Maximum Element: " << maxHeap.getMax() << "\n";

    return 0;
}
